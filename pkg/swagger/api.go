// Package swagger contains the API and was generated by Swagger codegen
package swagger

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"

	"github.com/peterjochum/traffic-jam-api/pkg/models"

	"github.com/peterjochum/traffic-jam-api/internal/app"

	"github.com/gorilla/mux"
)

// getID parses the TrafficJam id from the url parameters
func getID(r *http.Request) (int64, error) {
	vars := mux.Vars(r)
	return strconv.ParseInt(vars["id"], 10, 64)
}

func decodeTrafficJamFromRequest(r *http.Request) (*models.TrafficJam, error) {
	var jam models.TrafficJam
	err := json.NewDecoder(r.Body).Decode(&jam)
	return &jam, err
}

// AddTrafficJam adds a new traffic jam to the store
func AddTrafficJam(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	jam, err := decodeTrafficJamFromRequest(r)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		_, _ = w.Write([]byte("could not parse traffic jam from request body"))
		return
	}

	_, err = app.GlobalTrafficJamStore.GetTrafficJam(jam.ID)
	if err == nil {
		w.WriteHeader(http.StatusUnprocessableEntity)
		msg := fmt.Sprintf("traffic jam %d already exists", jam.ID)
		_, _ = w.Write([]byte(msg))
		return
	}

	// TODO: check if failing here is possible
	_ = app.GlobalTrafficJamStore.AddTrafficJam(*jam)
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write([]byte("success"))
}

// DeleteTrafficJam removes a TrafficJam from the store
func DeleteTrafficJam(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	id, err := getID(r)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		_, _ = w.Write([]byte("unable to parse id"))
		return
	}

	// Check for object existence
	_, err = app.GlobalTrafficJamStore.GetTrafficJam(id)
	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		_, _ = w.Write([]byte(err.Error()))
		return
	}

	// Delete object
	app.GlobalTrafficJamStore.DeleteTrafficJam(id)
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write([]byte(fmt.Sprintf("TrafficJam %d deleted", id)))
}

// GetAllTrafficJams returns a list of all TrafficJam objects
func GetAllTrafficJams(w http.ResponseWriter, _ *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	err := json.NewEncoder(w).Encode(app.GlobalTrafficJamStore.ListTrafficJams())
	if err != nil {
		log.Printf("Error encoding traffic jams .. continuing")
	}
}

// GetTrafficJam returns a TrafficJam by id
func GetTrafficJam(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	id, err := getID(r)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		_, _ = w.Write([]byte("unable to parse id"))
		return
	}

	tj, err := app.GlobalTrafficJamStore.GetTrafficJam(id)
	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		_, _ = w.Write([]byte(err.Error()))
		return
	}
	w.WriteHeader(http.StatusOK)
	_ = json.NewEncoder(w).Encode(tj)
}

// PutTrafficJam updates the data of a TrafficJam
func PutTrafficJam(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	// Get ID from request url
	id, err := getID(r)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		_, _ = w.Write([]byte("unable to parse id"))
		return
	}

	// Check for existing traffic jam
	_, err = app.GlobalTrafficJamStore.GetTrafficJam(id)
	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		_, _ = w.Write([]byte(err.Error()))
		return
	}

	// Decode body and update record
	jam, err := decodeTrafficJamFromRequest(r)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		_, _ = w.Write([]byte("could not parse body"))
		return
	}

	if err := app.GlobalTrafficJamStore.UpdateTrafficJam(id, *jam); err != nil {
		// TODO: will never be reached as existence has been tested before
		w.WriteHeader(http.StatusNotFound)
		_, _ = w.Write([]byte("unable to update record, not found"))
	}
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write([]byte("ok"))
}
