// Package swagger contains the API and was generated by Swagger codegen
package swagger

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"

	"github.com/peterjochum/traffic-jam-api/pkg/app"

	"github.com/gorilla/mux"
)

// getID parses the TrafficJam id from the url parameters
func getID(r *http.Request) (int64, error) {
	vars := mux.Vars(r)
	return strconv.ParseInt(vars["id"], 10, 64)
}

// AddTrafficJam adds a new traffic jam to the store
func AddTrafficJam(w http.ResponseWriter, _ *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

// DeleteTrafficJam removes a TrafficJam from the store
func DeleteTrafficJam(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	id, err := getID(r)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		_, _ = w.Write([]byte("unable to parse id"))
		return
	}

	// Check for object existence
	_, err = app.TrafficJamStore.GetTrafficJam(id)
	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		_, _ = w.Write([]byte(err.Error()))
		return
	}

	// Delete object
	app.TrafficJamStore.DeleteTrafficJam(id)
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write([]byte(fmt.Sprintf("TrafficJam %d deleted", id)))
}

// GetAllTrafficJams returns a list of all TrafficJam objects
func GetAllTrafficJams(w http.ResponseWriter, _ *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	err := json.NewEncoder(w).Encode(app.TrafficJamStore.ListTrafficJams())
	if err != nil {
		log.Printf("Error encoding traffic jams .. continuing")
	}
}

// GetTrafficJam returns a TrafficJam by id
func GetTrafficJam(w http.ResponseWriter, _ *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

// PutTrafficJam updates the data of a TrafficJam
func PutTrafficJam(w http.ResponseWriter, _ *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

}
